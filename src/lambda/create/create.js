"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (event) => {
    if (!event.body) {
        return { statusCode: 400, body: 'invalid request, you are missing the parameter body' };
    }
    const data = JSON.parse(event.body);
    //return { body: event.body };
    //const item = typeof event.body == 'object' ? event.body : JSON.parse(event.body);
    //item[PRIMARY_KEY] = uuidv4();
    const params = {
        TableName: TABLE_NAME,
        Item: {
            // The attributes of the item to be created
            aid: data.aid,
            added: Date.now(),
            offer_name: data.offer_name
        },
    };
    try {
        await db.put(params).promise();
        const headers = {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Credentials": true // Required for cookies, authorization headers with HTTPS
        };
        return {
            headers,
            statusCode: 200,
            body: ''
        };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' && dbError.message.includes('reserved keyword') ?
            DYNAMODB_EXECUTION_ERROR : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse + dbError.message + ' body:' + event.body };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDN0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBQ2hELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUNsRCxNQUFNLGlCQUFpQixHQUFHLHlEQUF5RCxFQUFFLHdCQUF3QixHQUFHLCtGQUErRixDQUFDO0FBRWhOLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQXdCLEVBQUUsRUFBRTtJQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNiLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxxREFBcUQsRUFBRSxDQUFDO0tBQzNGO0lBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsOEJBQThCO0lBQzlCLG1GQUFtRjtJQUNuRiwrQkFBK0I7SUFDL0IsTUFBTSxNQUFNLEdBQUc7UUFDWCxTQUFTLEVBQUUsVUFBVTtRQUNyQixJQUFJLEVBQUU7WUFDRiwyQ0FBMkM7WUFDM0MsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDakIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzlCO0tBQ0osQ0FBQztJQUNGLElBQUk7UUFDQSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDL0IsTUFBTSxPQUFPLEdBQUc7WUFDWiw2QkFBNkIsRUFBRSxHQUFHO1lBQ2xDLGtDQUFrQyxFQUFFLElBQUksQ0FBQyx5REFBeUQ7U0FDckcsQ0FBQTtRQUNELE9BQU87WUFDSCxPQUFPO1lBQ1AsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsRUFBRTtTQUNYLENBQUM7S0FDTDtJQUNELE9BQU8sT0FBTyxFQUFFO1FBQ1osTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxxQkFBcUIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDMUcsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxhQUFhLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQzdGO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xyXG5jb25zdCBkYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcclxuY29uc3QgVEFCTEVfTkFNRSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgJyc7XHJcbmNvbnN0IFBSSU1BUllfS0VZID0gcHJvY2Vzcy5lbnYuUFJJTUFSWV9LRVkgfHwgJyc7XHJcbmNvbnN0IFJFU0VSVkVEX1JFU1BPTlNFID0gYEVycm9yOiBZb3UncmUgdXNpbmcgQVdTIHJlc2VydmVkIGtleXdvcmRzIGFzIGF0dHJpYnV0ZXNgLCBEWU5BTU9EQl9FWEVDVVRJT05fRVJST1IgPSBgRXJyb3I6IEV4ZWN1dGlvbiB1cGRhdGUsIGNhdXNlZCBhIER5bmFtb2RiIGVycm9yLCBwbGVhc2UgdGFrZSBhIGxvb2sgYXQgeW91ciBDbG91ZFdhdGNoIExvZ3MuYDtcclxuXHJcbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogeyBib2R5OiBzdHJpbmc7IH0pID0+IHtcclxuICAgIGlmICghZXZlbnQuYm9keSkge1xyXG4gICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXJhbWV0ZXIgYm9keScgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xyXG4gICAgLy9yZXR1cm4geyBib2R5OiBldmVudC5ib2R5IH07XHJcbiAgICAvL2NvbnN0IGl0ZW0gPSB0eXBlb2YgZXZlbnQuYm9keSA9PSAnb2JqZWN0JyA/IGV2ZW50LmJvZHkgOiBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xyXG4gICAgLy9pdGVtW1BSSU1BUllfS0VZXSA9IHV1aWR2NCgpO1xyXG4gICAgY29uc3QgcGFyYW1zID0ge1xyXG4gICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcclxuICAgICAgICBJdGVtOiB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBpdGVtIHRvIGJlIGNyZWF0ZWRcclxuICAgICAgICAgICAgYWlkOiBkYXRhLmFpZCwgLy8gVGhlIGFpZCBvZiB0aGUgY3JlYXRlZCBhZFxyXG4gICAgICAgICAgICBhZGRlZDogRGF0ZS5ub3coKSwgLy8gdGltZXN0YW1wIGFkZGVkIChtaWxsaXNlY29uZHMpXHJcbiAgICAgICAgICAgIG9mZmVyX25hbWU6IGRhdGEub2ZmZXJfbmFtZVxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBkYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcclxuICAgICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsIC8vIFJlcXVpcmVkIGZvciBDT1JTIHN1cHBvcnQgdG8gd29ya1xyXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCI6IHRydWUgLy8gUmVxdWlyZWQgZm9yIGNvb2tpZXMsIGF1dGhvcml6YXRpb24gaGVhZGVycyB3aXRoIEhUVFBTXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICAgICAgYm9keTogJydcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGRiRXJyb3IpIHtcclxuICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gZGJFcnJvci5jb2RlID09PSAnVmFsaWRhdGlvbkV4Y2VwdGlvbicgJiYgZGJFcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdyZXNlcnZlZCBrZXl3b3JkJykgP1xyXG4gICAgICAgICAgICBEWU5BTU9EQl9FWEVDVVRJT05fRVJST1IgOiBSRVNFUlZFRF9SRVNQT05TRTtcclxuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA1MDAsIGJvZHk6IGVycm9yUmVzcG9uc2UgKyBkYkVycm9yLm1lc3NhZ2UgKyAnIGJvZHk6JyArIGV2ZW50LmJvZHkgfTtcclxuICAgIH1cclxufTsiXX0=